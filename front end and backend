Frontend Setup (React)
2.1 Install Dependencies:
In a separate folder for the frontend, run:

bash
Copy code
npx create-react-app admin-dashboard
cd admin-dashboard
npm install axios react-router-dom
2.2 Folder Structure:
src/components/ (React Components)
src/api/ (API calls)
css
Copy code
admin-dashboard/
├── src/
    ├── api/
    │   └── adminApi.js
    ├── components/
    │   ├── AddMentor.js
    │   ├── AddProjectTopic.js
    │   ├── MentorList.js
    │   └── ProjectTopicList.js
    └── App.js
2.3 src/api/adminApi.js (API Calls):
javascript
Copy code
import axios from 'axios';

const API_URL = 'http://localhost:5000/api/admin';

export const getTopics = async () => {
    return axios.get(`${API_URL}/topics`);
};

export const addTopic = async (name) => {
    return axios.post(`${API_URL}/add-topic`, { name });
};

export const addMentor = async (mentor) => {
    return axios.post(`${API_URL}/add-mentor`, mentor);
};

export const updateMentor = async (id, mentor) => {
    return axios.put(`${API_URL}/update-mentor/${id}`, mentor);
};

export const deleteMentor = async (id) => {
    return axios.delete(`${API_URL}/delete-mentor/${id}`);
};
2.4 Components for Adding and Listing Mentors & Topics
AddProjectTopic.js (Form for Adding Topics):
javascript
Copy code
import React, { useState } from 'react';
import { addTopic } from '../api/adminApi';

const AddProjectTopic = () => {
    const [topic, setTopic] = useState('');

    const handleAddTopic = async (e) => {
        e.preventDefault();
        try {
            await addTopic(topic);
            alert('Topic Added');
        } catch (err) {
            alert('Error adding topic');
        }
    };

    return (
        <form onSubmit={handleAddTopic}>
            <input
                type="text"
                value={topic}
                onChange={(e) => setTopic(e.target.value)}
                placeholder="Enter Project Topic"
                required
            />
            <button type="submit">Add Topic</button>
        </form>
    );
};

export default AddProjectTopic;
AddMentor.js (Form for Adding Mentors):
javascript
Copy code
import React, { useState, useEffect } from 'react';
import { getTopics, addMentor } from '../api/adminApi';

const AddMentor = () => {
    const [name, setName] = useState('');
    const [email, setEmail] = useState('');
    const [phone, setPhone] = useState('');
    const [password, setPassword] = useState('');
    const [selectedTopic, setSelectedTopic] = useState('');
    const [topics, setTopics] = useState([]);

    useEffect(() => {
        const fetchTopics = async () => {
            const response = await getTopics();
            setTopics(response.data);
        };
        fetchTopics();
    }, []);

    const handleSubmit = async (e) => {
        e.preventDefault();
        const mentor = { name, email


You said:
please continue generating
ChatGPT said:
ChatGPT
Sure! Continuing from where we left off, here's the continuation of the AddMentor.js component and the rest of the frontend:

AddMentor.js (continued):
javascript
Copy code
        const mentor = { name, email, phone, password, projectTopic: selectedTopic };
        try {
            await addMentor(mentor);
            alert('Mentor Added');
            setName('');
            setEmail('');
            setPhone('');
            setPassword('');
            setSelectedTopic('');
        } catch (err) {
            alert('Error adding mentor');
        }
    };

    return (
        <form onSubmit={handleSubmit}>
            <input
                type="text"
                value={name}
                onChange={(e) => setName(e.target.value)}
                placeholder="Enter Mentor Name"
                required
            />
            <input
                type="email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                placeholder="Enter Mentor Email"
                required
            />
            <input
                type="text"
                value={phone}
                onChange={(e) => setPhone(e.target.value)}
                placeholder="Enter Mentor Phone"
                required
            />
            <input
                type="password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                placeholder="Enter Mentor Password"
                required
            />
            <select
                value={selectedTopic}
                onChange={(e) => setSelectedTopic(e.target.value)}
                required
            >
                <option value="">Select Project Topic</option>
                {topics.map((topic) => (
                    <option key={topic._id} value={topic._id}>
                        {topic.name}
                    </option>
                ))}
            </select>
            <button type="submit">Add Mentor</button>
        </form>
    );
};

export default AddMentor;
ProjectTopicList.js (Display List of Project Topics):
javascript
Copy code
import React, { useState, useEffect } from 'react';
import { getTopics } from '../api/adminApi';

const ProjectTopicList = () => {
    const [topics, setTopics] = useState([]);

    useEffect(() => {
        const fetchTopics = async () => {
            const response = await getTopics();
            setTopics(response.data);
        };
        fetchTopics();
    }, []);

    return (
        <div>
            <h3>Project Topics</h3>
            <ul>
                {topics.map((topic) => (
                    <li key={topic._id}>{topic.name}</li>
                ))}
            </ul>
        </div>
    );
};

export default ProjectTopicList;
MentorList.js (Display List of Mentors):
javascript
Copy code
import React, { useState, useEffect } from 'react';
import { deleteMentor, getTopics } from '../api/adminApi';

const MentorList = () => {
    const [mentors, setMentors] = useState([]);
    const [topics, setTopics] = useState([]);

    useEffect(() => {
        const fetchMentors = async () => {
            const response = await axios.get('http://localhost:5000/api/admin/mentors');
            setMentors(response.data);
        };
        const fetchTopics = async () => {
            const response = await getTopics();
            setTopics(response.data);
        };

        fetchMentors();
        fetchTopics();
    }, []);

    const handleDelete = async (id) => {
        try {
            await deleteMentor(id);
            setMentors(mentors.filter((mentor) => mentor._id !== id));
        } catch (err) {
            alert('Error deleting mentor');
        }
    };

    return (
        <div>
            <h3>Mentors</h3>
            <ul>
                {mentors.map((mentor) => (
                    <li key={mentor._id}>
                        {mentor.name} - {mentor.email} - {mentor.phone} - 
                        {topics.find((topic) => topic._id === mentor.projectTopic)?.name}
                        <button onClick={() => handleDelete(mentor._id)}>Delete</button>
                    </li>
                ))}
            </ul>
        </div>
    );
};

export default MentorList;
2.5 App.js (Main Component):
javascript
Copy code
import React from 'react';
import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';
import AddMentor from './components/AddMentor';
import AddProjectTopic from './components/AddProjectTopic';
import MentorList from './components/MentorList';
import ProjectTopicList from './components/ProjectTopicList';

const App = () => {
    return (
        <Router>
            <div>
                <h1>Admin Dashboard</h1>
                <nav>
                    <ul>
                        <li><a href="/add-mentor">Add Mentor</a></li>
                        <li><a href="/add-topic">Add Project Topic</a></li>
                        <li><a href="/mentor-list">Mentors</a></li>
                        <li><a href="/project-topics">Project Topics</a></li>
                    </ul>
                </nav>
                <Switch>
                    <Route path="/add-mentor" component={AddMentor} />
                    <Route path="/add-topic" component={AddProjectTopic} />
                    <Route path="/mentor-list" component={MentorList} />
                    <Route path="/project-topics" component={ProjectTopicList} />
                </Switch>
            </div>
        </Router>
    );
};

export default App;
3. Running the Application
3.1 Starting Backend (Node.js & Express):
To run the backend server:

Make sure MongoDB is running (locally or using MongoDB Atlas).
In the backend directory (mern-admin-dashboard), run:
bash
Copy code
node server.js
This will start the backend server on port 5000 (or any port you configure).

3.2 Starting Frontend (React):
In the frontend directory (admin-dashboard), run:
bash
Copy code
npm start
This will start the React app on http://localhost:3000.

3.3 Testing the Application:
Admin Dashboard: The admin can add mentors, add topics, view the lists of mentors and project topics, and delete mentors.
Mentor & Topic Management: Admin can create and delete topics, assign mentors to project topics, and manage mentor details.
Conclusion:
This basic MERN stack admin dashboard allows the admin to manage project topics and mentors. Here's a recap of the steps:

Backend: A Node.js server with Express handles MongoDB data for mentors and project topics.
Frontend: A React app displays forms for adding mentors and topics, and lists them for management.
API Calls: Axios is used for interacting with the backend API for CRUD operations.
Additional Enhancements:
Authentication: Implement login and session management (e.g., using JWT) to secure the admin panel.
Form Validation: Add client-side validation to the forms.
UI Improvements: Style the UI with a CSS framework like Bootstrap or Material UI.
Let me know if you need any further clarifications!
